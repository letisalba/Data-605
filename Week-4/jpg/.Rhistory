}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
flat=matrix(0, 17, prod(dim(im)))
for (i in 1:17) {
newim <- readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i]))
r=as.vector(im[i,,,1]); g=as.vector(im[i,,,2]);b=as.vector(im[i,,,3])
flat[i,] <- t(c(r, g, b))
}
shoes=as.data.frame(t(flat))
dim(flat)
dim(shoes)
str(shoes)
par(mfrow=c(3,3))
par(mai=c(.3,.3,.3,.3))
for (i in 1:17){  #plot the first images only
plot_jpeg(writeJPEG(im[i,,,]))
}
scaled=scale(shoes, center = TRUE, scale = TRUE)
mean.shoe=attr(scaled, "scaled:center") #saving for classification
std.shoe=attr(scaled, "scaled:scale")  #saving for classification...later
Sigma_=cor(scaled)
myeigen=eigen(Sigma_)
cumsum(myeigen$values) / sum(myeigen$values)
scaling=diag(myeigen$values[1:5]^(-1/2)) / (sqrt(nrow(scaled)-1))
eigenshoes=scaled%*%myeigen$vectors[,1:5]%*%scaling
dim(eigenshoes)
par(mfrow=c(2,3))
imageShow(array(eigenshoes[,1], c(60,125,3)))
height=1200
width=2500
scale=20
newdata=im
dim(newdata)=c(length(files),height*width*3/scale^2)
mypca=princomp(t(as.matrix(newdata)), scores=TRUE, cor=TRUE)
mypca2=t(mypca$scores)
dim(mypca2)=c(length(files),height/scale,width/scale,3)
par(mfrow=c(5,5))
par(mai=c(.001,.001,.001,.001))
for (i in 1:17){#plot the first 25 Eigenshoes only
plot_jpeg(writeJPEG(mypca2[i,,,], bg="white"))  #complete without reduction
}
a=round(mypca$sdev[1:17]^2/ sum(mypca$sdev^2),3)
cumsum(a)
x = t(t(eigenshoes)%*%scaled)
install.packages(EBImage)
install.packages("EBImage")
install.packages("EBImage")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
install.packages("BiocManager")
BiocManager::install("EBImage")
a
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=90), tidy=TRUE)
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height=1200; width=2500;scale=20
plot_jpeg = function(path, add=FALSE)
{ jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[2:1] # get the resolution, [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=90), tidy=TRUE)
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i]),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
BiocManager::install(c("GenomicFeatures", "AnnotationDbi"))
knitr::opts_chunk$set(echo = TRUE)
# Install packages if needed and load library
#install.packages("Matrix")
library(Matrix)
# Create matrix A
A <- matrix(c(1, 2, 3, 4, -1, 0, 1, 3, 0, 1, -2, 1, 5, 4, -2, -3), nrow = 4, byrow = TRUE)
A
# Rank of the matrix A
qr(A)$rank
# Create matrix B
B <- matrix(c(1, 2, 1, 3, 6, 3, 2, 4, 2), nrow = 3, byrow = TRUE)
qr(B)$rank
# Create matrix A
A_ps2 <- matrix(c(1, 2, 3, 0, 4, 5, 0, 0, 6), nrow = 3, byrow = T)
# Find Eigenvalues
eigen(A_ps2)$values
# Find Eigenvectors
eigen(A_ps2)$vectors
knitr::opts_chunk$set(echo = TRUE)
A <- matrix(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8), nrow = 4, byrow = T)
matrixA <- matrix(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8), nrow = 4, byrow = T)
library(pracma)
matrixA <- matrix(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8), nrow = 4, byrow = T)
library(pracma)
matrixA <- matrix(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8), nrow = 4, byrow = T)
library(pracma)
matrixA <- matrix(c(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8)), nrow = 4, byrow = T)
library(pracma)
matrixA <- matrix(c(2, -2, 2, 1, 3, 1, 3, 5, 2, 11, 5, 8)), nrow = 3, byrow = T)
library(pracma)
A <- matrix(c(2, -2, 2, 1, 3, 1 , 3, 5, 2, 11, 5, 8), nrow = 3, ncol = 4)
A
#rref(A)
library(pracma)
A <- matrix(c(2, -2, 2, 1, 3, 1 , 3, 5, 2, 11, 5, 8), nrow = 3, ncol = 4)
rref(A)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height=1200; width=2500;scale=20
plot_jpeg = function(path, add=FALSE)
{ jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[2:1] # get the resolution, [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
install.packages("magick")
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each libRary will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for( i in 1:17){
img=image_read("/Users/letiix3/Desktop/Data-605/Week-4/jpg/"),
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height=1200; width=2500;scale=20
plot_jpeg = function(path, add=FALSE)
{ jpg = readJPEG(path, native=T) # read the file
res = dim(jpg)[2:1] # get the resolution, [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1,1,xlim=c(1,res[1]),ylim=c(1,res[2]),asp=1,type='n',xaxs='i',yaxs='i',xaxt='n',yaxt='n',xlab='',ylab='',bty='n')
rasterImage(jpg,1,1,res[1],res[2])
}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
flat=matrix(0, 17, prod(dim(im)))
for (i in 1:17) {
newim <- readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i]))
r=as.vector(im[i,,,1]); g=as.vector(im[i,,,2]);b=as.vector(im[i,,,3])
flat[i,] <- t(c(r, g, b))
}
shoes=as.data.frame(t(flat))
dim(flat)
dim(shoes)
str(shoes)
par(mfrow=c(3,3))
par(mai=c(.3,.3,.3,.3))
for (i in 1:17){  #plot the first images only
plot_jpeg(writeJPEG(im[i,,,]))
}
scaled=scale(shoes, center = TRUE, scale = TRUE)
mean.shoe=attr(scaled, "scaled:center") #saving for classification
std.shoe=attr(scaled, "scaled:scale")  #saving for classification...later
Sigma_=cor(scaled)
myeigen=eigen(Sigma_)
cumsum(myeigen$values) / sum(myeigen$values)
scaling=diag(myeigen$values[1:5]^(-1/2)) / (sqrt(nrow(scaled)-1))
eigenshoes=scaled%*%myeigen$vectors[,1:5]%*%scaling
dim(eigenshoes)
par(mfrow=c(2,3))
imageShow(array(eigenshoes[,1], c(60,125,3)))
height=1200
width=2500
scale=20
newdata=im
dim(newdata)=c(length(files),height*width*3/scale^2)
mypca=princomp(t(as.matrix(newdata)), scores=TRUE, cor=TRUE)
mypca2=t(mypca$scores)
dim(mypca2)=c(length(files),height/scale,width/scale,3)
par(mfrow=c(5,5))
par(mai=c(.001,.001,.001,.001))
for (i in 1:17){#plot the first 25 Eigenshoes only
plot_jpeg(writeJPEG(mypca2[i,,,], bg="white"))  #complete without reduction
}
a=round(mypca$sdev[1:17]^2/ sum(mypca$sdev^2),3)
cumsum(a)
x = t(t(eigenshoes)%*%scaled)
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))
}
# Resize function scales the images to the specified dimensions
im = array(rep(0, length(files)*height/scale*width/scale*3), dim = c(length(files), height/scale,                                                          width/scale,3))
x <- readImage(system.file("/Users/letiix3/Desktop/Data-605/Week-4/jpg/"))
# Resize function scales the images to the specified dimensions
im = array(rep(0, length(files)*height/scale*width/scale*3), dim = c(length(files), height/scale,                                                          width/scale,3))
path = (system.file("/Users/letiix3/Desktop/Data-605/Week-4/jpg/"))
#for (i in 1:17){
#  temp = resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])), height/scale, width/scale)
#  im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))
#}
# Resize function scales the images to the specified dimensions
im = array(rep(0, length(files)*height/scale*width/scale*3), dim = c(length(files), height/scale,                                                          width/scale,3))
path = (system.file("/Users/letiix3/Desktop/Data-605/Week-4/jpg/"))
image = readImage(path)
# Resize function scales the images to the specified dimensions
im = array(rep(0, length(files)*height/scale*width/scale*3), dim = c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp = resizeImage(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])), height/scale, width/scale)
im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))
}
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height = 1200; width = 2500; scale = 20
plot_jpeg = function(path, add = FALSE)
{ jpg = readJPEG(path, native = T) # This reads the file
res = dim(jpg)[2:1] # obtains the resolution [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1, 1, xlim = c(1, res[1]), ylim = c(1, res[2]), asp = 1, type = 'n', xaxs = 'i', yaxs = 'i', xaxt = 'n', yaxt = 'n', xlab ='', ylab ='', bty = 'n')
rasterImage(jpg, 1, 1, res[1], res[2])
}
# Resize function scales the images to the specified dimensions
im = array(rep(0, length(files)*height/scale*width/scale*3), dim = c(length(files), height/scale,                                                          width/scale,3))
for (i in 1:17){
temp = resizeImage(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])), height/scale, width/scale)
im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))
}
flat=matrix(0, 17, prod(dim(im)))
for (i in 1:17) {
newim <- readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i]))
r=as.vector(im[i,,,1]); g=as.vector(im[i,,,2]);b=as.vector(im[i,,,3])
flat[i,] <- t(c(r, g, b))
}
shoes=as.data.frame(t(flat))
dim(flat)
dim(shoes)
str(shoes)
par(mfrow=c(3,3))
par(mai=c(.3,.3,.3,.3))
for (i in 1:17){  #plot the first images only
plot_jpeg(writeJPEG(im[i,,,]))
}
scaled=scale(shoes, center = TRUE, scale = TRUE)
mean.shoe=attr(scaled, "scaled:center") #saving for classification
std.shoe=attr(scaled, "scaled:scale")  #saving for classification...later
Sigma_=cor(scaled)
myeigen=eigen(Sigma_)
cumsum(myeigen$values) / sum(myeigen$values)
scaling=diag(myeigen$values[1:5]^(-1/2)) / (sqrt(nrow(scaled)-1))
eigenshoes=scaled%*%myeigen$vectors[,1:5]%*%scaling
dim(eigenshoes)
par(mfrow=c(2,3))
imageShow(array(eigenshoes[,1], c(60,125,3)))
height=1200
width=2500
scale=20
newdata=im
dim(newdata)=c(length(files),height*width*3/scale^2)
mypca=princomp(t(as.matrix(newdata)), scores=TRUE, cor=TRUE)
mypca2=t(mypca$scores)
dim(mypca2)=c(length(files),height/scale,width/scale,3)
par(mfrow=c(5,5))
par(mai=c(.001,.001,.001,.001))
for (i in 1:17){#plot the first 25 Eigenshoes only
plot_jpeg(writeJPEG(mypca2[i,,,], bg="white"))  #complete without reduction
}
a=round(mypca$sdev[1:17]^2/ sum(mypca$sdev^2),3)
cumsum(a)
x = t(t(eigenshoes)%*%scaled)
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("D:/Jered/Images/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Pictures/jpg", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
# Resize function scales the images to the specified dimensions
im=array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp=resize(readJPEG(paste0("/Users/letiix3/Pictures/jpg/", files[i])),height/scale, width/scale)
im[i,,,]=array(temp,dim=c(1, height/scale, width/scale,3))}
install.packages('imager')
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each libRary will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
library("Imager")
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each libRary will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
library("imager")
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each libRary will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
library("imager")
install.packaged("OpenImageR")
install.packages("OpenImageR")
install.packages("OpenImageR")
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60), tidy=TRUE)
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Pictures/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height = 1200; width = 2500; scale = 20
plot_jpeg = function(path, add = FALSE)
{ jpg = readJPEG(path, native = T) # This reads the file
res = dim(jpg)[2:1] # obtains the resolution [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1, 1, xlim = c(1, res[1]), ylim = c(1, res[2]), asp = 1, type = 'n', xaxs = 'i', yaxs = 'i', xaxt = 'n', yaxt = 'n', xlab ='', ylab ='', bty = 'n')
rasterImage(jpg, 1, 1, res[1], res[2])
}
# Resize function scales the images to the specified dimensions
im = array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp = resizeImage(readJPEG(paste0("/Users/letiix3/Pictures/jpg/", files[i])), height/scale, width/scale)
im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))}
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each libRary will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each library will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
library('kableExtra')
# Build complex HTML or 'LaTeX' tables using 'kable()' from 'knitr' and the piping syntax from 'magrittr'.
library('magick')
# Bindings to 'ImageMagick': the most comprehensive open-source image processing library available. Supports many common formats (png, jpeg, tiff, pdf, etc) and manipulations (rotate, scale, crop, trim, flip, blur, etc).
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Pictures/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height = 1200; width = 2500; scale = 20
plot_jpeg = function(path, add = FALSE)
{ jpg = readJPEG(path, native = T) # This reads the file
res = dim(jpg)[2:1] # obtains the resolution [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1, 1, xlim = c(1, res[1]), ylim = c(1, res[2]), asp = 1, type = 'n', xaxs = 'i', yaxs = 'i', xaxt = 'n', yaxt = 'n', xlab ='', ylab ='', bty = 'n')
rasterImage(jpg, 1, 1, res[1], res[2])
}
# Resize function scales the images to the specified dimensions
im = array(rep(0,length(files)*height/scale*width/scale*3), dim=c(length(files), height/scale, width/scale,3))
for (i in 1:17){
temp = resize(readJPEG(paste0("/Users/letiix3/Pictures/jpg/", files[i])), height/scale, width/scale)
im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))}
flat=matrix(0, 17, prod(dim(im)))
for (i in 1:17) {
newim <- readJPEG(paste0("/Users/letiix3/Pictures/jpg/", files[i]))
r=as.vector(im[i,,,1]); g=as.vector(im[i,,,2]);b=as.vector(im[i,,,3])
flat[i,] <- t(c(r, g, b))
}
shoes=as.data.frame(t(flat))
dim(flat)
dim(shoes)
str(shoes)
par(mfrow=c(3,3))
par(mai=c(.3,.3,.3,.3))
for (i in 1:17){  #plot the first images only
plot_jpeg(writeJPEG(im[i,,,]))
}
scaled=scale(shoes, center = TRUE, scale = TRUE)
mean.shoe=attr(scaled, "scaled:center") #saving for classification
std.shoe=attr(scaled, "scaled:scale")  #saving for classification...later
Sigma_=cor(scaled)
myeigen=eigen(Sigma_)
cumsum(myeigen$values) / sum(myeigen$values)
scaling=diag(myeigen$values[1:5]^(-1/2)) / (sqrt(nrow(scaled)-1))
eigenshoes=scaled%*%myeigen$vectors[,1:5]%*%scaling
dim(eigenshoes)
par(mfrow=c(2,3))
imageShow(array(eigenshoes[,1], c(60,125,3)))
height=1200
width=2500
scale=20
newdata=im
dim(newdata)=c(length(files),height*width*3/scale^2)
mypca=princomp(t(as.matrix(newdata)), scores=TRUE, cor=TRUE)
mypca2=t(mypca$scores)
dim(mypca2)=c(length(files),height/scale,width/scale,3)
par(mfrow=c(5,5))
par(mai=c(.001,.001,.001,.001))
for (i in 1:17){#plot the first 25 Eigenshoes only
plot_jpeg(writeJPEG(mypca2[i,,,], bg="white"))  #complete without reduction
}
a=round(mypca$sdev[1:17]^2/ sum(mypca$sdev^2),3)
cumsum(a)
x = t(t(eigenshoes)%*%scaled)
remotes::install_github('yihui/tinytex')
knitr::opts_chunk$set(echo = TRUE)
x = t(t(eigenshoes)%*%scaled)
x
x = t(t(eigenshoes)%*%scaled)
print(x, n = 4)
x = t(t(eigenshoes)%*%scaled)
print(getwd())
setwd("~/RStudio/dsc520/LSalazar_Assignment4_files/figure-html/unnamed-chunk-10-1.png"))
print(getwd())
setwd("/Users/letiix3/Desktop/Data-605/Week-4/jpg/")
print(getwd())
pandoc_version()
sessionInfo()
devtools::install_github("boxuancui/DataExplorer", ref = "develop")

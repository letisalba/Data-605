image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 30, byrow = T)
image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
par(mfrow = c (2, 5))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
par(mfrow = c (5, 2))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
par(mfrow = c (3, 2))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
par(mfrow = c (2, 3))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
install.packages("adimpro")
# image must be rotated
library(adimpro)
# image must be rotated
library(adimpro)
rotate.image(image1, angle = 90, compress = NULL)
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# image must be rotated
library(adimpro)
rotate.image(image1, angle = 90, compress = NULL)
# image must be rotated
library(adimpro)
rotate.image(image1, angle = 90, compress = NULL)
# image must be rotated
library(OpenImageR)
rotateFixed(image1, angle = 90)
# image must be rotated
library(OpenImageR)
r <- rotateFixed(image1, angle = 90)
r
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255), angle = 90)
# image must be rotated
r <- apply(image1, 2, rev)
r
# image must be rotated
r <- rotateImage(image1, 90, threads = 1)
r
# image must be rotated
rotate <- functon(x) t(apply(x, 2, rev))
# image must be rotated
rotate <- functon(x) t(apply(x, 2, rev))
# image must be rotated
#rotate <- functon(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
}
# image must be rotated
#rotate <- functon(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
}
# image must be rotated
#rotate <- functon(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(image1, col = grey.colors(255))
}
# image must be rotated
#rotate <- functon(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(training, col = grey.colors(255))
}
par(mfrow = c (2, 3))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
par(mfrow = c (2, 3))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
# image must be rotated
#rotate <- functon(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(image1, col = grey.colors(255))
}
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 3))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(rotate(image1, col = grey.colors(255)))
}
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
rotate <- function(x) t(apply(x, 2, rev))
image(rotate(image1, col = grey.colors(255)))
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=90), tidy=TRUE)
# Install packages / load libraries. I've included a brief description of the libraries loaded to understand what each library will be used for
library('doParallel')
# Provides a parallel backend for the %dopar% function using the parallel package
library('foreach')
# Support for the foreach looping construct. Foreach is an idiom that allows for iterating over elements in a collection, without the use of an explicit loop counter.
library('jpeg')
# This package provides an easy and simple way to read, write and display bitmap images stored in the JPEG format.
library('EBImage')
# EBImage provides general purpose functionality for image processing and analysis. In the context of (high-throughput) microscopy-based cellular assays, EBImage offers tools to segment cells and extract quantitative cellular descriptors.
library('OpenImageR')
#Incorporates functions for image preprocessing, filtering and image recognition.
# There's 17 images in the file of soccer shoes
num = 17
# reading the files from my system (update code to reproduce the images from your system)
files = list.files("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", pattern="\\.jpg")[1:num]
# Adjusting Parameters
height = 1200; width = 2500; scale = 20
plot_jpeg = function(path, add = FALSE)
{ jpg = readJPEG(path, native = T) # This reads the file
res = dim(jpg)[2:1] # obtains the resolution [x, y]
if (!add) # initialize an empty plot area if add==FALSE
plot(1, 1, xlim = c(1, res[1]), ylim = c(1, res[2]), asp = 1, type = 'n', xaxs = 'i', yaxs = 'i', xaxt = 'n', yaxt = 'n', xlab ='', ylab ='', bty = 'n')
rasterImage(jpg, 1, 1, res[1], res[2])
}
# Resize function scales the images to the specified dimensions
im = array(rep(0,length(files) * height/scale * width/scale * 3), dim = c(length(files), height/scale, width/scale,3))
# This resizes images
for (i in 1:17){
temp = resize(readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i])), height/scale, width/scale)
im[i,,,] = array(temp, dim = c(1, height/scale, width/scale,3))}
flat = matrix(0, 17, prod(dim(im)))
for (i in 1:17) {
newim <- readJPEG(paste0("/Users/letiix3/Desktop/Data-605/Week-4/jpg/", files[i]))
r = as.vector(im[i,,,1]); g = as.vector(im[i,,,2]);b = as.vector(im[i,,,3])
flat[i,] <- t(c(r, g, b))
}
shoes = as.data.frame(t(flat))
dim(flat)
dim(shoes)
str(shoes)
par(mfrow = c(3,3))
par(mai = c(.3,.3,.3,.3))
# This plots the first images
for (i in 1:17){
plot_jpeg(writeJPEG(im[i,,,]))
}
# These next few code chunks calculate the 80% variability
scaled = scale(shoes, center = TRUE, scale = TRUE)
mean.shoe = attr(scaled, "scaled:center") #saving for classification
std.shoe = attr(scaled, "scaled:scale")  #saving for classification...later
Sigma_ = cor(scaled)
myeigen = eigen(Sigma_)
myeigen
cumsum(myeigen$values) / sum(myeigen$values)
# This would demonstrate the 80% variability in 2 positions
scaling = diag(myeigen$values[1:2]^(-1/2)) / (sqrt(nrow(scaled)-1))
eigenshoes = scaled%*%myeigen$vectors[,1:2]%*%scaling
par(mfrow = c(2,3))
imageShow(array(eigenshoes[,2], c(60,125,3)))
# Transformation of Images
height = 1200; width = 2500; scale = 20
newdata = im
dim(newdata) = c(length(files), height * width * 3/scale^2)
mypca = princomp(t(as.matrix(newdata)), scores = TRUE, cor = TRUE)
# This includes all 17 shoe images
mypca2 = t(mypca$scores)
dim(mypca2) = c(length(files), height/scale, width/scale, 3)
par(mfrow = c(5, 5))
par(mai = c(.001, .001, .001, .001))
# This plots the first 25 Eigenshoes only
for (i in 1:17){
plot_jpeg(writeJPEG(mypca2[i,,,], bg = "white"))  #complete without reduction
}
a = round(mypca$sdev[1:17]^2/ sum(mypca$sdev^2),3)
cumsum(a)
x = t(t(eigenshoes)%*%scaled)
par(mfrow = c (2, 5))
for (i in 1:10){
m <- matrix(unlist(training[i, -1]), nrow = 28, byrow = T)[,28:1]
image(m, col = grey.colors(255))
}
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 5))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(flipImage(image1, col = grey.colors(255)))
}
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 5))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(flipImage(image1))
}
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 5))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(flipImage(image1[i,,]))
}
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 5))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(1:28, 1:28flipImage(image1))
# image must be rotated
rotate <- function(x) t(apply(x, 2, rev))
par(mfrow = c(2, 5))
for (i in 1:10){
matrix(unlist(training[i, -1]), nrow = 28)[,28:1]
image(1:28, 1:28, flipImage(image1))
}
# Load data set from computer, file is too large to upload to free github account
# for knitting purposes I am not printing out the data set because it is too long
train <- read.csv('/Users/letiix3/Desktop/Data-605/Week-15/digit-recognizer/train.csv')
head(train[1:10])
dim(train)
# Load data set from computer, file is too large to upload to free github account
# for knitting purposes I am not printing out the data set because it is too long
train <- read.csv('/Users/letiix3/Desktop/Data-605/Week-15/digit-recognizer/train.csv')
head(train[1:10], n = 5)
dim(train)
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- rotate(matrix(unlist(training[10, -1]), nrow = 28, byrow = T))
image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# image must be rotated
image1 <- rotate(matrix(unlist(training[10, -1]), nrow = 28, byrow = T))
image(image1, col = grey.colors(255))
# Now to apply this to all the images
par(mfrow = c(2, 5))
for (i in 1:10){
rotate(matrix(unlist(training[i, -1]), nrow = 28)[,28:1])
image(m, col = grey.colors(255))
}
# Now to apply this to all the images
par(mfrow = c(2, 5))
for (i in 1:10){
rotate(matrix(unlist(training[i, -1]), nrow = 28))
image(m, col = grey.colors(255))
}
# Now to apply this to all the images
par(mfrow = c(2, 5))
for (i in 1:10){
rotate(matrix(unlist(training[i, -1]), nrow = 28)[,28:1])
image(m, col = grey.colors(255))
}
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(image1, col = grey.colors(255))
}
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(train, col = grey.colors(255))
}
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(m, col = grey.colors(255))
}
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(m, col = grey.colors(255))
}
train[1:10]
train$label[1:10]
freq <- table(train)
transform(table(train))
hist(train)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("igraph")
library(igraph)
library(openintro)
library(matrixcalc)
library(Matrix)
# create matrix
A <- matrix(c(0, (1/2), (1/2), 0, 0, 0, 0, 0, 0, 0, 0, 0, (1/3), (1/3), 0, 0, (1/3), 0, 0, 0, 0, 0, (1/2), (1/2), 0, 0, 0, (1/2), 0, (1/2), 0, 0, 0, 1, 0, 0), nrow = 6, byrow = T)
A
#formatC(A, format = "f", digits = 4)
n <- 6 # number of webpages
# creating new row to replace matrix A second row
row2 <- rep(1/6, n)
# Removing second row from matrix A
A_2 <- A[-2,]
# Adding r into the second row and creating matrix A_2
A_2 <- matrix(rbind(A_2[1,], row2, A_2[- (1), ]), 6)
A_2
#A_2 <- A + (apply(A, 1, sum) !=1) * 1 / n
#formatC(A_2, format = "f", digits = 4)
# decay form B matrix
decay <- 0.85
n <- nrow(A_2)
B <- decay * A_2 + ((1 - decay) / n)
formatC(B, format = "f", digits = 4)
# We will take the second row of 0.167 to perform the iterations on B when r = B^n * r
# We'll do a couple of iterations increasing by 10 starting at 0
n <- 0
r_0 <- matrix.power(t(B), n) %*%  row2
r_0
n <- 10
r_10 <- matrix.power(t(B), n) %*%  row2
r_10
n <- 20
r_20 <- matrix.power(t(B), n) %*% row2
r_20
n <- 30
r_30 <- matrix.power(t(B), n) %*% row2
r_30
n <- 40
r_40 <- matrix.power(t(B), n) %*% row2
r_40
n <- 50
r_50 <- matrix.power(t(B), n) %*% row2
r_50
# By iteration 30 we found the convergence
iter_converg <- matrix.power(t(B), 30) %*% row2
# For this I decided to do a for loop to not have to actually do this manually.
#for (i in seq(0, 50, by = 10)){
#print(paste("ITERATION BY ",i,":"))
#print((t(B)^ i) %*% row2)
#print(matrix.power(t(B), n) %*% row2)
#print("...........................")
#}
eigen_decomp <- eigen(B)
eigen_decomp
# turning values as numeric and getting the max value of 1
max_value_decomp <- which.max(eigen(B)$values)
print(paste('The largest eigenvalue is', max(max_value_decomp)))
# corresponding vector of max eigenvalue
eigen_decomp2 <- as.numeric((1/sum(eigen_decomp$vectors[,1]))*eigen_decomp$vectors[,1])
sum(eigen_decomp2)
# Here we are using the library 'igraph' installed at the begining to complete the question
#graph_A <- graph.adjacency(A, weighted = T)
graph_A <- graph_from_adjacency_matrix(A, weighted = T)
plot(graph_A)
# verifying that you get the same PageRank vector as the two approached above
pageRank <- page.rank(graph_A)$vector
results <- (round(iter_converg, 4) == round(pageRank, 4))
results
# Load data set from computer, file is too large to upload to free github account
# for knitting purposes I am not printing out the data set because it is too long
train <- read.csv('/Users/letiix3/Desktop/Data-605/Week-15/digit-recognizer/train.csv')
head(train[1:10], n = 5)
dim(train)
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# image must be rotated
image1 <- rotate(matrix(unlist(training[10, -1]), nrow = 28, byrow = T))
image(image1, col = grey.colors(255))
# Now to apply this to images 1:10 of the whole data set
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(m, col = grey.colors(255))
}
hist(train)
# load libraries
library(ggplot2)
train %>%
ggplot(aes(x = label, y = frequency)) +
geom_histogram(stat = 'identity') +
labs(title = 'Frequency Distribution')
label <- train$label
freq <- as.data.frame(table(label))
train %>%
ggplot(aes(x = label, y = freq)) +
geom_histogram(stat = 'identity') +
labs(title = 'Frequency Distribution')
knitr::opts_chunk$set(echo = TRUE)
# install.packages("igraph")
library(igraph)
library(openintro)
library(matrixcalc)
library(Matrix)
# create matrix
A <- matrix(c(0, (1/2), (1/2), 0, 0, 0, 0, 0, 0, 0, 0, 0, (1/3), (1/3), 0, 0, (1/3), 0, 0, 0, 0, 0, (1/2), (1/2), 0, 0, 0, (1/2), 0, (1/2), 0, 0, 0, 1, 0, 0), nrow = 6, byrow = T)
A
#formatC(A, format = "f", digits = 4)
n <- 6 # number of webpages
# creating new row to replace matrix A second row
row2 <- rep(1/6, n)
# Removing second row from matrix A
A_2 <- A[-2,]
# Adding r into the second row and creating matrix A_2
A_2 <- matrix(rbind(A_2[1,], row2, A_2[- (1), ]), 6)
A_2
#A_2 <- A + (apply(A, 1, sum) !=1) * 1 / n
#formatC(A_2, format = "f", digits = 4)
# decay form B matrix
decay <- 0.85
n <- nrow(A_2)
B <- decay * A_2 + ((1 - decay) / n)
formatC(B, format = "f", digits = 4)
# We will take the second row of 0.167 to perform the iterations on B when r = B^n * r
# We'll do a couple of iterations increasing by 10 starting at 0
n <- 0
r_0 <- matrix.power(t(B), n) %*%  row2
r_0
n <- 10
r_10 <- matrix.power(t(B), n) %*%  row2
r_10
n <- 20
r_20 <- matrix.power(t(B), n) %*% row2
r_20
n <- 30
r_30 <- matrix.power(t(B), n) %*% row2
r_30
n <- 40
r_40 <- matrix.power(t(B), n) %*% row2
r_40
n <- 50
r_50 <- matrix.power(t(B), n) %*% row2
r_50
# By iteration 30 we found the convergence
iter_converg <- matrix.power(t(B), 30) %*% row2
# For this I decided to do a for loop to not have to actually do this manually.
#for (i in seq(0, 50, by = 10)){
#print(paste("ITERATION BY ",i,":"))
#print((t(B)^ i) %*% row2)
#print(matrix.power(t(B), n) %*% row2)
#print("...........................")
#}
eigen_decomp <- eigen(B)
eigen_decomp
# turning values as numeric and getting the max value of 1
max_value_decomp <- which.max(eigen(B)$values)
print(paste('The largest eigenvalue is', max(max_value_decomp)))
# corresponding vector of max eigenvalue
eigen_decomp2 <- as.numeric((1/sum(eigen_decomp$vectors[,1]))*eigen_decomp$vectors[,1])
sum(eigen_decomp2)
# Here we are using the library 'igraph' installed at the begining to complete the question
#graph_A <- graph.adjacency(A, weighted = T)
graph_A <- graph_from_adjacency_matrix(A, weighted = T)
plot(graph_A)
# verifying that you get the same PageRank vector as the two approached above
pageRank <- page.rank(graph_A)$vector
results <- (round(iter_converg, 4) == round(pageRank, 4))
results
# load libraries
library(ggplot2)
# Load data set from computer, file is too large to upload to free github account
# for knitting purposes I am not printing out the data set because it is too long
train <- read.csv('/Users/letiix3/Desktop/Data-605/Week-15/digit-recognizer/train.csv')
head(train[1:10], n = 5)
dim(train)
# creating a plot to see how one image looks
image1 <- matrix(unlist(training[10, -1]), nrow = 28, byrow = T)
image(image1, col = grey.colors(255))
# image must be rotated
image1 <- rotate(matrix(unlist(training[10, -1]), nrow = 28, byrow = T))
image(image1, col = grey.colors(255))
# Now to apply this to images 1:10 of the whole data set
par(mfrow = c (2, 5))
for (i in 1:10){
m <- rotate(matrix(unlist(train[i, -1]), nrow = 28, byrow = T))
image(m, col = grey.colors(255))
}
label <- train$label
freq <- as.data.frame(table(label))
train %>%
ggplot(aes(x = label, y = freq)) +
geom_histogram(stat = 'identity') +
labs(title = 'Frequency Distribution')
label <- train$label
freq <- as.data.frame(table(label))
freq %>%
ggplot(aes(x = label, y = freq)) +
geom_histogram(stat = 'identity') +
labs(title = 'Frequency Distribution')
label <- train$label
train_freq <- as.data.frame(table(label))
train_freq %>%
ggplot(aes(x = label, y = freq)) +
geom_histogram(stat = 'identity') +
labs(title = 'Frequency Distribution')
